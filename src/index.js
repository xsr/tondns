import lodash from "lodash"
import React from "react"
import axios from "axios"
import dayjs from "dayjs"
import TonWeb from "tonweb"

export const


  DDNS_AUCTION = "B5EE9C724102150100037C000114FF00F4A413F4BCF2C80B0102016202030202CC04050029A0BEABE003F083F085F087F089F08BF08DF08FE007020120060701D9B50041AE43A63FA67E6043022223751CA263F086258E0BE5C3230410989680E5F605F08802E10421AA64EDB6B0DB060CE1003191960AA00F9E2CA00BF4042B96D425963F967E44DD6728B19E2E032265C4039203F600FFF0C31605F0C8E1F0CBE005C003041011246975C604B71402012008090015D642C678B00FD0164FC3440201200A0B020120121303F50CC8B1C02497C0F83434C0FE900C3C00405C6C250C407C02B800B4C7F4CFC8A051662EB8C08C08604444AEA38F5B087E10C4B1C17CB8647E11005C20805166161B6040281C20063232C15401F3C594017E808572DA84B2C7F2CFC89BACE51633C5C0644CB88072407EC0383E107CB875C86080515E2EB8C08CCC600C0D0E006D3B51343480007E187E90007E18BE90007E18FE90007E193E106CFE1135D27000AC244C3834CFC07E1974C7C07E19B5007E19F50C3E1A2002B86C22F841F84214C705B313B1F844D749C202B102FA4001F864028E3331F844017082014598586D8040708018C8CB055007CF165005FA0215CB6A12CB1FCB3F226EB39458CF17019132E201C901FB00E0F865D430F86770F86688F8680F1001D0310182084C4B40A1F003208E3D5320BCF2E3CDF846F823B609F8668208914578F8236D70708018C8CB055007CF165005FA0215CB6A12CB1FCB3F226EB39458CF17019132E201C901FB008E125B20821005F5E100BCF2E3D0F823A614F866E25220F00482014578011100AC813252BA8E4DF846C200F846F823B9B0F2E3D1F00330F84758F84270820808923404C8CC5005CF161443308306708018C8CB055007CF165005FA0215CB6A12CB1FCB3F226EB39458CF17019132E201C901FB009130E200000066F84370811111F8236D8040708018C8CB055007CF165005FA0215CB6A12CB1FCB3F226EB39458CF17019132E201C901FB00F002006082081E8480596D72708018C8CB055007CF165005FA0215CB6A12CB1FCB3F226EB39458CF17019132E201C901FB00F00200453E123E11FE11BE117E107232803E10B3C5BE10F3C5BE1133C5B2CFF2C7F333327B552000233E12340835D2650C22C09C387E903E800C20007AF84212C705F2E191F0033001708208789234586D8100A0708018C8CB055007CF165005FA0215CB6A12CB1FCB3F226EB39458CF17019132E201C901FB001823F64B",
  api = axios.create({baseURL: location.origin}),
  ton = new TonWeb.HttpProvider("https://testnet.toncenter.com/api/v2/jsonRPC", {apiKey: "5c7c4d700f4e5aa33696920635ed1bdd82873547411d18f82097053821aeeb00"}),
  readIntFromBitString = (bs, cursor, bits) => {
    let n = BigInt(0)
    for (let i = 0; i < bits; i++) {
        n *= BigInt(2)
        n += BigInt(bs.get(cursor + i))
    }
    return n
  },
  parseAddress = cell => {
    let n = readIntFromBitString(cell.bits, 3, 8)
    if (n > BigInt(127)) {
        n = n - BigInt(256)
    }
    const hashPart = readIntFromBitString(cell.bits, 3 + 8, 256)
    if (n.toString(10) + ":" + hashPart.toString(16) === '0:0') return null
    const s = n.toString(10) + ":" + hashPart.toString(16).padStart(64, '0')
    return new TonWeb.Address(s)
  },
  DDNS = class extends TonWeb.Contract {
    constructor(address) {
      super(ton, {
        address: new TonWeb.Address(address),
        code: TonWeb.boc.Cell.oneFromBoc(DDNS_DNS)
      })
    }
    async getNftAddressByName(name) {
      let
        cell = new TonWeb.boc.Cell(),
        data
      cell.bits.writeString(name)
      data = await this.provider.call2((await this.getAddress()).toString(), "get_nft_address_by_name", [["tvm.Slice", TonWeb.utils.bytesToBase64(await cell.toBoc(false))]])
      return parseAddress(data)
    }
    async isInit() {
      let data = await this.provider.call2((await this.getAddress()).toString(), "is_init")
      return data.toNumber()
    }
    async getNftData() {
      let data = await this.provider.call2((await this.getAddress()).toString(), "get_nft_data")
      return {
        index: data[1].toNumber(),
        collectionAddress: parseAddress(data[2]),
        ownerAddress: parseAddress(data[3]),
        contentCell: data[4]
      }
    }
    async getCollectionData() {
      let data = await this.provider.call2((await this.getAddress()).toString(), "get_collection_data")
      return {
        nextItemIndex: data[0].toNumber(),
        ownerAddress: parseAddress(data[2])
      }
    }
  },
  Auction = class extends TonWeb.Contract {
  },
  DDNSOwner = class extends TonWeb.Contract {
    constructor(address) {
      super(ton, {
        address: new TonWeb.Address(address),
        code: TonWeb.boc.Cell.oneFromBoc(DDNS_OWNER)
      })
      this.methods.getAuctionAddress = this.getAuctionAddress.bind(this)
    }
    async getAddressInfo(address) {
      return this.provider.getAddressInfo(address)
    }
    async getAuctionAddress(domain) {
      const
        me = await this.getAddress(),
        cell = new TonWeb.boc.Cell()
      cell.bits.writeString(domain)
      let
        data = await this.provider.call2(me.toString(), "get_auction_address", [["tvm.Cell", TonWeb.utils.bytesToBase64(await cell.toBoc(false))]])
      // console.log("dat", data.bits.toString())
      return parseAddress(data)
    }
    async deployAuction(domain) {

      const accs = await window.ton.send("ton_requestAccounts")
      const wals = await window.ton.send("ton_requestWallets")
      console.log("accs", accs)
      console.log("wal", wals)

      let
        ret,
        domainCell = new TonWeb.boc.Cell(),
        cell = new TonWeb.boc.Cell()

      domainCell.bits.writeString(domain)

      cell.bits.writeUint(0x4598, 32)
      cell.bits.writeUint(new Date().getTime(), 64)
      cell.bits.writeAddress(new TonWeb.Address(accs[0]))
      cell.refs[0] = domainCell


      ret = await window.ton.send(
        "ton_sendTransaction",
        [{
          to: (await this.getAddress()).toString(),
          // to: "0QDbvAbsX5SSrEJxuHeYJ1xjynTrR5er-XFsC1FMJZOZK6L8",
          value: "280000000",
          dataType: "boc",
          data: TonWeb.utils.bytesToBase64(await cell.toBoc(false)),
        }]
      )

      // let
      //   ret = await this.provider.call2(
      //     (await this.getAddress()).toString(),
      //     "deploy_auction",
      //     [
      //       ["num", new Date().getTime()],
      //       ["tvm.Cell", TonWeb.utils.bytesToBase64(await domainCell.toBoc(false))],
      //       ["tvm.Slice", TonWeb.utils.bytesToBase64(await destinationCell.toBoc(false))]
      //     ]
      //   )
      // let
      //   ret = await window.ton.send(
      //     "runGetMethod", {
      //       address: (await this.getAddress()).toString(),
      //       method: "deploy_auction",
      //       params: [
      //         ["num", new Date().getTime()],
      //         ["tvm.Cell", TonWeb.utils.bytesToBase64(await domainCell.toBoc(false))],
      //         ["tvm.Slice", TonWeb.utils.bytesToBase64(await destinationCell.toBoc(false))]
      //       ]
      //     }
      //   )
      return ret
    }
  },
  useDDNS = (address) => {
    const
      contract = new DDNS(address),
      info = async address => {
        return await ton.getAddressInfo(address)
      }
    return {contract, info}
  },
  useDNSOwner = (address) => {
    const
      contract = new DDNSOwner(address)
    return {
      contract
    }
  },
  nil = null
